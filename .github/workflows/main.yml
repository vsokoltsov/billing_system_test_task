# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Populate .env file
        run: |
          echo """
            POSTGRES_DB=billing
            POSTGRES_USER=user
            POSTGRES_PASSWORD=password
            DB_HOST=postgres
            DB_PORT=5432
            PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org
            PGADMIN_DEFAULT_PASSWORD=admin
            APP_ENV=development
          """ > .env

      - name: Populate .env.test file
        run: |
          echo """
            APP_ENV=test
            POSTGRES_DB=billing_test
            DB_HOST=postgres_test
            DB_PORT=5432
            POSTGRES_USER=user
            POSTGRES_PASSWORD=password
          """ > .env.test

      # - name: Build test database
      #   run: docker-compose up -d -f docker-compose.test.yml

      # - name: Run application in container
      #   run: docker-compose up -d billing_app

      # Runs a set of commands using the runners shell
      - name: Run tests
        run: |
          docker-compose -d -f docker-compose.test.yml up
          echo $(docker ps -a)
          docker-compose run billing_app bash -c "pytest"
